{"version":3,"file":"static/js/movies-page.39a2237d.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/MoviesList/MoviesList.module.css?de3d","components/MoviesList/MoviesList.jsx","webpack://react-homework-template/./src/components/MoviesListItem/MoviesListItem.module.css?7daa","components/MoviesListItem/MoviesListItem.jsx","webpack://react-homework-template/./src/components/MoviesPage/SearchField/SearchField.module.css?8a9e","components/MoviesPage/SearchField/SearchField.jsx","components/MoviesPage/MoviesSearchList/MoviesSearchList.jsx","components/MoviesPage/MoviesPage.jsx","services/genres-names.js","services/movies-api.js","services/normalized-data.js","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"gallery\":\"MoviesList_gallery__Nw0Bb\"};","import s from './MoviesList.module.css';\n\nexport default function MoviesList({children}) {\n    return <ul className={s.gallery}>\n        {children}\n    </ul>\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"MoviesListItem_item__4rNsZ\",\"title\":\"MoviesListItem_title__sM-ZN\",\"link\":\"MoviesListItem_link__cb8vw\",\"image_wrapper\":\"MoviesListItem_image_wrapper__Qy8Mw\",\"description\":\"MoviesListItem_description__nf87f\",\"genres\":\"MoviesListItem_genres__QPD00\",\"genres__item\":\"MoviesListItem_genres__item__FsD7V\",\"info\":\"MoviesListItem_info__dxW6k\",\"rating\":\"MoviesListItem_rating__DRQ+7\"};","import PropTypes from 'prop-types';\nimport { Link, useLocation } from 'react-router-dom';\nimport s from './MoviesListItem.module.css';\n\nexport default function MoviesListItem({ data }) {\n  const location = useLocation();\n  const query = new URLSearchParams(location.search).get('query') ?? '';\n\n    return (\n      data.map(({ title, id, poster_path, genres, release_date, vote_average }) => (\n          <li className={s.item} key={id}>\n          <Link to={`/movies/${id}`} state={{ from: location, search: query }} className={s.link}>\n            <div className={s.image_wrapper}>\n              {poster_path\n                    ? <img src={`https://image.tmdb.org/t/p/w500${poster_path}`} alt={title} className={s.image}/>\n                    : <img src='https://upload.wikimedia.org/wikipedia/commons/6/65/No-Image-Placeholder.svg' alt={title} className={s.image} />\n                }\n            </div>\n            <div className={s.description}>\n              <h3 className={s.title}>{title}</h3>\n              <ul className={s.genres}>\n                {genres.length>0\n                  ? genres.map(({ id, name }, index) => (\n                      <li className={s.genres__item} key={id}>\n                          { (index ? ', ' : '') + name }\n                      </li>\n                    ))\n                  : <p className={s.genres__item}>Other</p>}\n              </ul>\n              <p className={s.info}>\n                {vote_average !== 0\n                  ? <span className={s.rating}><i className=\"fa fa-star-o\"></i>&#160;{vote_average}</span>\n                  : <span className={s.rating}><i className=\"fa fa-star-o\"></i>&#160;--</span>}\n                {release_date !== ''\n                    ? <span className={s.date}>{parseInt(release_date)}</span>\n                    : <span className={s.date}>--</span>}\n              </p>\n            </div>\n          </Link>\n        </li>\n      ))\n    )\n}\n\nMoviesListItem.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    })\n  ),\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"SearchField_form__X+C6Z\",\"input\":\"SearchField_input__pGwyh\",\"button\":\"SearchField_button__RaTD9\",\"icon\":\"SearchField_icon__EAryr\"};","import { useState } from 'react';\nimport s from './SearchField.module.css';\nimport { toast } from 'react-toastify';\nimport sprite from '../../../images/icons.svg'\n\nfunction SearchField(props) {\n    const [searchQuery, setSearchQuery] = useState('');\n\n    const handleSearchQueryChange = event => {\n        setSearchQuery(event.currentTarget.value.toLowerCase());\n    };\n\n    const handleSubmit = event => {\n        event.preventDefault();\n\n        if (searchQuery.trim() === '') {\n            //Setting searchQuery state '' in case query got spaces\n            setSearchQuery('');\n\n            return toast.info(\"Input your search query\");\n        }\n\n        props.onSubmit(searchQuery);\n\n        setSearchQuery('');\n    }\n\n    return <form className={s.form} onSubmit={handleSubmit}>\n        <input\n            className={s.input}\n            type=\"text\"\n            autoComplete=\"off\"\n            name=\"searchQuery\"\n            placeholder=\"Search movie...\"\n            value={searchQuery}\n            onChange={handleSearchQueryChange}\n        />\n\n        <button type=\"submit\" className={s.button}>\n            <svg className={s.icon} width=\"16\" height=\"16\" aria-label=\"logo\">\n                <use href={`${sprite}#search`}></use>\n            </svg>\n        </button>\n    </form>\n}\n\nexport default SearchField;\n","import PropTypes from 'prop-types';\nimport { useState, useEffect } from 'react';\nimport { fetchMovies } from 'services/movies-api';\nimport MoviesList from 'components/MoviesList';\nimport MoviesListItem from '../../MoviesListItem';\nimport normalizedData from 'services/normalized-data';\nimport { toast } from 'react-toastify';\n\nexport default function MoviesSearchList({searchQuery}) {\n    const [movies, setMovies] = useState([]);\n\n    useEffect(() => {\n        if (searchQuery === '') {\n            return;\n        }\n\n        fetchMovies(searchQuery)\n            .then(data => {\n                if (data.total_results > 0) {\n                    setMovies(normalizedData(data.results));\n                }\n\n                else {\n                    setMovies([]);\n                    return toast.error(\"Sorry, there are no images matching your search query. Please try again.\");\n                }\n            });\n    }, [searchQuery])\n\n\n\n    return <MoviesList>\n        <MoviesListItem data={ movies }/>\n    </MoviesList>\n}\n\nMoviesSearchList.propTypes = {\n    searchQuery: PropTypes.string,\n}\n","import { useState, useEffect } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport SearchField from './SearchField';\nimport MoviesSearchList from './MoviesSearchList';\nimport { toast } from 'react-toastify';\n\n\nexport default function MoviesPage() {\n    const [searchQuery, setSearchQuery] = useState('');\n\n    // Catching search query from address bar\n    const navigate = useNavigate();\n    const location = useLocation();\n    const query = new URLSearchParams(location.search).get('query') ?? '';\n\n    // Catching search query from search bar input field\n    const handleSubmit = searchQueryValue => {\n        if (searchQuery === searchQueryValue) {\n            return toast.info(\"Input new search query.\");\n        }\n\n        navigate(`${location.pathname}?query=${searchQueryValue}`);\n\n        setSearchQuery(searchQueryValue);\n    }\n\n    // Setting search query from address bar\n    useEffect(() => {\n        if (query !== '') {\n            setSearchQuery(query);\n        }\n    }, [query])\n\n    return <>\n        <SearchField onSubmit={handleSubmit}/>\n        <MoviesSearchList searchQuery={ searchQuery }/>\n    </>\n}\n","export const genresNames = [\n  {\n    id: 28,\n    name: 'Action',\n  },\n  {\n    id: 12,\n    name: 'Adventure',\n  },\n  {\n    id: 16,\n    name: 'Animation',\n  },\n  {\n    id: 35,\n    name: 'Comedy',\n  },\n  {\n    id: 80,\n    name: 'Crime',\n  },\n  {\n    id: 99,\n    name: 'Documentary',\n  },\n  {\n    id: 18,\n    name: 'Drama',\n  },\n  {\n    id: 10751,\n    name: 'Family',\n  },\n  {\n    id: 14,\n    name: 'Fantasy',\n  },\n  {\n    id: 36,\n    name: 'History',\n  },\n  {\n    id: 27,\n    name: 'Horror',\n  },\n  {\n    id: 10402,\n    name: 'Music',\n  },\n  {\n    id: 9648,\n    name: 'Mystery',\n  },\n  {\n    id: 10749,\n    name: 'Romance',\n  },\n  {\n    id: 878,\n    name: 'Science Fiction',\n  },\n  {\n    id: 10770,\n    name: 'TV Movie',\n  },\n  {\n    id: 53,\n    name: 'Thriller',\n  },\n  {\n    id: 10752,\n    name: 'War',\n  },\n  {\n    id: 37,\n    name: 'Western',\n  },\n];\n","const BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '?api_key=387a2500e741e87c896db50117c25d75'\n\nasync function fetchWithErrorHandling(url = '', config = {}) {\n    const response = await fetch(url, config);\n    return response.ok\n        ? await response.json()\n        : Promise.reject(new Error('Not found'));\n}\n\nexport function fetchTrendingMovies(page=\"1\") {\n    const PATH_PARAMS = '/trending/movie/week';\n\n    // return fetch(`${BASE_URL}${PATH_PARAMS}${API_KEY}&page=${page}`)\n    //     .then(response => response.json())\n\n    return fetchWithErrorHandling(`${BASE_URL}${PATH_PARAMS}${API_KEY}&page=${page}`)\n}\n\nexport function fetchMovies(searchQuery, page = \"1\") {\n    const PATH_PARAMS = '/search/movie';\n    const searchParams = '&language=en-US&include_adult=false';\n\n    // return fetch(`${BASE_URL}${PATH_PARAMS}${API_KEY}&query=${searchQuery}&page=${page}${searchParams}`)\n    //     .then(response => response.json())\n\n    return fetchWithErrorHandling(`${BASE_URL}${PATH_PARAMS}${API_KEY}&query=${searchQuery}&page=${page}${searchParams}`)\n}\n\nexport function fetchMovieDetails(movie_id) {\n    const PATH_PARAMS = '/movie/';\n    const searchParams = '&language=en-US';\n\n    // return fetch(`${BASE_URL}${PATH_PARAMS}${movie_id}${API_KEY}${searchParams}`)\n    //     .then(response => response.json())\n\n    return fetchWithErrorHandling(`${BASE_URL}${PATH_PARAMS}${movie_id}${API_KEY}${searchParams}`)\n}\n\nexport function fetchMovieCredits(movie_id) {\n    const PATH_PARAMS = '/movie/';\n    const searchParams = '&language=en-US';\n\n    // return fetch(`${BASE_URL}${PATH_PARAMS}${movie_id}/credits${API_KEY}${searchParams}`)\n    //     .then(response => response.json())\n\n    return fetchWithErrorHandling(`${BASE_URL}${PATH_PARAMS}${movie_id}/credits${API_KEY}${searchParams}`)\n}\n\nexport function fetchMovieReviews(movie_id, page = \"1\") {\n    const PATH_PARAMS = '/movie/';\n    const searchParams = '&language=en-US';\n\n    // return fetch(`${BASE_URL}${PATH_PARAMS}${movie_id}/reviews${API_KEY}${searchParams}&page=${page}`)\n    //     .then(response => response.json())\n\n    return fetchWithErrorHandling(`${BASE_URL}${PATH_PARAMS}${movie_id}/reviews${API_KEY}${searchParams}&page=${page}`)\n}\n","import { genresNames } from \"./genres-names\";\n\n// Normalize the data\nexport default function normalizedData(results) {\n    return results.map(movie => {\n        const genres = createGenres(genresNames, movie.genre_ids);\n        let listOfGenres = genres[0];\n\n        if (listOfGenres.length > 3) {\n            listOfGenres.splice(2, 5);\n\n            let other = {\n                id: 777,\n                name: 'Other',\n            };\n\n            listOfGenres.push(other);\n        }\n\n        let objData = {\n            ...movie,\n            genres: listOfGenres,\n        };\n\n        return objData;\n    });\n}\n\n//create the Array/List of Genres (names)\nfunction createGenres(arrayID, genresID) {\nlet arrayOfGenres = [];\nreturn arrayID.map(element => {\n    if (genresID.includes(element.id)) {\n    arrayOfGenres.push(element);\n    }\n    return arrayOfGenres;\n});\n}\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["MoviesList","children","className","s","MoviesListItem","data","location","useLocation","query","URLSearchParams","search","get","map","title","id","poster_path","genres","release_date","vote_average","to","state","from","src","alt","length","index","name","parseInt","props","useState","searchQuery","setSearchQuery","onSubmit","event","preventDefault","trim","toast","type","autoComplete","placeholder","value","onChange","currentTarget","toLowerCase","width","height","href","sprite","MoviesSearchList","movies","setMovies","useEffect","fetchMovies","then","total_results","normalizedData","results","MoviesPage","navigate","useNavigate","searchQueryValue","pathname","genresNames","BASE_URL","API_KEY","fetchWithErrorHandling","url","config","fetch","response","ok","json","Promise","reject","Error","fetchTrendingMovies","page","PATH_PARAMS","searchParams","fetchMovieDetails","movie_id","fetchMovieCredits","fetchMovieReviews","movie","listOfGenres","arrayID","genresID","arrayOfGenres","element","includes","push","createGenres","genre_ids","splice","asyncGeneratorStep","gen","resolve","_next","_throw","key","arg","info","error","done","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}