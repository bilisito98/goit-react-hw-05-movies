{"version":3,"file":"static/js/home-page.a5b8778e.chunk.js","mappings":"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","sources":["components/HomePage/TrendingMovies/TrendingMovies.jsx","components/HomePage/HomePage.jsx","webpack://react-homework-template/./src/components/MoviesList/MoviesList.module.css?de3d","components/MoviesList/MoviesList.jsx","webpack://react-homework-template/./src/components/MoviesListItem/MoviesListItem.module.css?7daa","components/MoviesListItem/MoviesListItem.jsx","services/genres-names.js","services/movies-api.js","services/normalized-data.js","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport MoviesList from 'components/MoviesList';\nimport MoviesListItem from '../../MoviesListItem';\nimport normalizedData from 'services/normalized-data';\nimport { fetchTrendingMovies } from 'services/movies-api';\n\n\nexport default function TrendingMovies() {\n    const [movies, setMovies] = useState([]);\n\n    useEffect(() => {\n        fetchTrendingMovies()\n            .then(data => {\n                setMovies(normalizedData(data.results));\n            });\n    }, [])\n\n    return <MoviesList>\n        <MoviesListItem data={movies} />\n    </MoviesList>\n}\n","import TrendingMovies from './TrendingMovies';\n\n\nexport default function HomePage() {\n    return <TrendingMovies/>\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"gallery\":\"MoviesList_gallery__Nw0Bb\"};","import s from './MoviesList.module.css';\n\nexport default function MoviesList({children}) {\n    return <ul className={s.gallery}>\n        {children}\n    </ul>\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"MoviesListItem_item__4rNsZ\",\"title\":\"MoviesListItem_title__sM-ZN\",\"link\":\"MoviesListItem_link__cb8vw\",\"image_wrapper\":\"MoviesListItem_image_wrapper__Qy8Mw\",\"description\":\"MoviesListItem_description__nf87f\",\"genres\":\"MoviesListItem_genres__QPD00\",\"genres__item\":\"MoviesListItem_genres__item__FsD7V\",\"info\":\"MoviesListItem_info__dxW6k\",\"rating\":\"MoviesListItem_rating__DRQ+7\"};","import PropTypes from 'prop-types';\nimport { Link, useLocation } from 'react-router-dom';\nimport s from './MoviesListItem.module.css';\n\nexport default function MoviesListItem({ data }) {\n  const location = useLocation();\n  const query = new URLSearchParams(location.search).get('query') ?? '';\n\n    return (\n      data.map(({ title, id, poster_path, genres, release_date, vote_average }) => (\n          <li className={s.item} key={id}>\n          <Link to={`/movies/${id}`} state={{ from: location, search: query }} className={s.link}>\n            <div className={s.image_wrapper}>\n              {poster_path\n                    ? <img src={`https://image.tmdb.org/t/p/w500${poster_path}`} alt={title} className={s.image}/>\n                    : <img src='https://upload.wikimedia.org/wikipedia/commons/6/65/No-Image-Placeholder.svg' alt={title} className={s.image} />\n                }\n            </div>\n            <div className={s.description}>\n              <h3 className={s.title}>{title}</h3>\n              <ul className={s.genres}>\n                {genres.length>0\n                  ? genres.map(({ id, name }, index) => (\n                      <li className={s.genres__item} key={id}>\n                          { (index ? ', ' : '') + name }\n                      </li>\n                    ))\n                  : <p className={s.genres__item}>Other</p>}\n              </ul>\n              <p className={s.info}>\n                {vote_average !== 0\n                  ? <span className={s.rating}><i className=\"fa fa-star-o\"></i>&#160;{vote_average}</span>\n                  : <span className={s.rating}><i className=\"fa fa-star-o\"></i>&#160;--</span>}\n                {release_date !== ''\n                    ? <span className={s.date}>{parseInt(release_date)}</span>\n                    : <span className={s.date}>--</span>}\n              </p>\n            </div>\n          </Link>\n        </li>\n      ))\n    )\n}\n\nMoviesListItem.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    })\n  ),\n};\n","export const genresNames = [\n  {\n    id: 28,\n    name: 'Action',\n  },\n  {\n    id: 12,\n    name: 'Adventure',\n  },\n  {\n    id: 16,\n    name: 'Animation',\n  },\n  {\n    id: 35,\n    name: 'Comedy',\n  },\n  {\n    id: 80,\n    name: 'Crime',\n  },\n  {\n    id: 99,\n    name: 'Documentary',\n  },\n  {\n    id: 18,\n    name: 'Drama',\n  },\n  {\n    id: 10751,\n    name: 'Family',\n  },\n  {\n    id: 14,\n    name: 'Fantasy',\n  },\n  {\n    id: 36,\n    name: 'History',\n  },\n  {\n    id: 27,\n    name: 'Horror',\n  },\n  {\n    id: 10402,\n    name: 'Music',\n  },\n  {\n    id: 9648,\n    name: 'Mystery',\n  },\n  {\n    id: 10749,\n    name: 'Romance',\n  },\n  {\n    id: 878,\n    name: 'Science Fiction',\n  },\n  {\n    id: 10770,\n    name: 'TV Movie',\n  },\n  {\n    id: 53,\n    name: 'Thriller',\n  },\n  {\n    id: 10752,\n    name: 'War',\n  },\n  {\n    id: 37,\n    name: 'Western',\n  },\n];\n","const BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '?api_key=387a2500e741e87c896db50117c25d75'\n\nasync function fetchWithErrorHandling(url = '', config = {}) {\n    const response = await fetch(url, config);\n    return response.ok\n        ? await response.json()\n        : Promise.reject(new Error('Not found'));\n}\n\nexport function fetchTrendingMovies(page=\"1\") {\n    const PATH_PARAMS = '/trending/movie/week';\n\n    // return fetch(`${BASE_URL}${PATH_PARAMS}${API_KEY}&page=${page}`)\n    //     .then(response => response.json())\n\n    return fetchWithErrorHandling(`${BASE_URL}${PATH_PARAMS}${API_KEY}&page=${page}`)\n}\n\nexport function fetchMovies(searchQuery, page = \"1\") {\n    const PATH_PARAMS = '/search/movie';\n    const searchParams = '&language=en-US&include_adult=false';\n\n    // return fetch(`${BASE_URL}${PATH_PARAMS}${API_KEY}&query=${searchQuery}&page=${page}${searchParams}`)\n    //     .then(response => response.json())\n\n    return fetchWithErrorHandling(`${BASE_URL}${PATH_PARAMS}${API_KEY}&query=${searchQuery}&page=${page}${searchParams}`)\n}\n\nexport function fetchMovieDetails(movie_id) {\n    const PATH_PARAMS = '/movie/';\n    const searchParams = '&language=en-US';\n\n    // return fetch(`${BASE_URL}${PATH_PARAMS}${movie_id}${API_KEY}${searchParams}`)\n    //     .then(response => response.json())\n\n    return fetchWithErrorHandling(`${BASE_URL}${PATH_PARAMS}${movie_id}${API_KEY}${searchParams}`)\n}\n\nexport function fetchMovieCredits(movie_id) {\n    const PATH_PARAMS = '/movie/';\n    const searchParams = '&language=en-US';\n\n    // return fetch(`${BASE_URL}${PATH_PARAMS}${movie_id}/credits${API_KEY}${searchParams}`)\n    //     .then(response => response.json())\n\n    return fetchWithErrorHandling(`${BASE_URL}${PATH_PARAMS}${movie_id}/credits${API_KEY}${searchParams}`)\n}\n\nexport function fetchMovieReviews(movie_id, page = \"1\") {\n    const PATH_PARAMS = '/movie/';\n    const searchParams = '&language=en-US';\n\n    // return fetch(`${BASE_URL}${PATH_PARAMS}${movie_id}/reviews${API_KEY}${searchParams}&page=${page}`)\n    //     .then(response => response.json())\n\n    return fetchWithErrorHandling(`${BASE_URL}${PATH_PARAMS}${movie_id}/reviews${API_KEY}${searchParams}&page=${page}`)\n}\n","import { genresNames } from \"./genres-names\";\n\n// Normalize the data\nexport default function normalizedData(results) {\n    return results.map(movie => {\n        const genres = createGenres(genresNames, movie.genre_ids);\n        let listOfGenres = genres[0];\n\n        if (listOfGenres.length > 3) {\n            listOfGenres.splice(2, 5);\n\n            let other = {\n                id: 777,\n                name: 'Other',\n            };\n\n            listOfGenres.push(other);\n        }\n\n        let objData = {\n            ...movie,\n            genres: listOfGenres,\n        };\n\n        return objData;\n    });\n}\n\n//create the Array/List of Genres (names)\nfunction createGenres(arrayID, genresID) {\nlet arrayOfGenres = [];\nreturn arrayID.map(element => {\n    if (genresID.includes(element.id)) {\n    arrayOfGenres.push(element);\n    }\n    return arrayOfGenres;\n});\n}\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["TrendingMovies","useState","movies","setMovies","useEffect","fetchTrendingMovies","then","data","normalizedData","results","MoviesList","MoviesListItem","HomePage","children","className","s","location","useLocation","query","URLSearchParams","search","get","map","title","id","poster_path","genres","release_date","vote_average","to","state","from","src","alt","length","index","name","parseInt","genresNames","BASE_URL","API_KEY","fetchWithErrorHandling","url","config","fetch","response","ok","json","Promise","reject","Error","page","PATH_PARAMS","fetchMovies","searchQuery","searchParams","fetchMovieDetails","movie_id","fetchMovieCredits","fetchMovieReviews","movie","listOfGenres","arrayID","genresID","arrayOfGenres","element","includes","push","createGenres","genre_ids","splice","asyncGeneratorStep","gen","resolve","_next","_throw","key","arg","info","value","error","done","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}